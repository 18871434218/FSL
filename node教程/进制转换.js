let FaultAlarm1 =  new Map([
    [0, '未定义'],
    [1, '整机复位中;(复位完成或复位失败后自动恢复)'],
    [2, '任务执行失败;(1s后自动恢复)'],
    [3, '急停按下;(急停解除后自动恢复)'],
    [4, '暂停中;(停机或排除报警后按触摸屏启动按钮恢复)'],
    [5, '纠偏失败;(现场确认情况后通过软复位恢复)'],
    [6, '扫码NG;(1s后自动恢复)'],
    [7, 'PLC与PC通讯异常报警;(通讯恢复自动恢复)'],
    [8, '升降伺服报警;(现场查看硬件确认情况)'],
    [9, '旋转步进报警;(现场查看硬件确认情况)'],
    [10, '纠偏步进报警;(现场查看硬件确认情况)'],
    [11, '平移步进报警;(现场查看硬件确认情况)'],
    [12, '升降伺服正极限CW报警;(整机复位或手动点动恢复)'],
    [13,'升降伺服正极限CCW报警;(整机复位或手动点动恢复)'],
    [14, '旋转步进正极限CW报警;(整机复位或手动点动恢复)'],
    [15, '旋转步进正极限CCW报警;(整机复位或手动点动恢复)'],
    [16, '纠偏步进正极限CW报警;(整机复位或手动点动恢复)'],
    [17, '纠偏步进正极限CCW报警;(整机复位或手动点动恢复)'],
    [18, '平移步进正极限CW报警;(整机复位或手动点动恢复)'],
    [19, '平移步进正极限CCW报警;(整机复位或手动点动恢复)'],
    [20, '无原点标志-升降轴;(整机复位或回原点完成自动恢复)'],
    [21, '无原点标志-旋转轴;(整机复位或回原点完成自动恢复)'],
    [22, '无原点标志-纠偏轴;(整机复位或回原点完成自动恢复)'],
    [23, '无原点标志-平移轴;(整机复位或回原点完成自动恢复)'],
    [24, '任务终止;(立即自动恢复)'],
    [25, '整机复位超时;(立即自动恢复)'],
    [26, '连续扫码NG;(立即自动恢复)'],
    [27, '有料标志与感应器不符;(现场确认情况，有料光电状态和有料标志一直后自动恢复)']
]);

function PLCbit(errCode) {
    let bitNumber = errCode.toString(2).split('').reverse().join('');   
    let errMap = new Map();
    let err = []; 
    for (let ii = 0; ii < bitNumber.length; ii++) {
        if (FaultAlarm1.has(ii) && bitNumber[ii] === '1') {
            err.push(FaultAlarm1.get(ii));
        }
    }

    return errMap.set(errCode, err);
};

let num = 16777248;
console.log('错误转换', PLCbit(num));
console.log('1', num.toString(2))